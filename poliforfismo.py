# -*- coding: utf-8 -*-
"""poliforfismo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mzPKEyrn1K4-G6ktgXnXOiI5Gj07vvtJ

Crie duas classes, Carro e Moto, que tenham um método acelerar(). Cada classe deve exibir uma mensagem diferente.
"""

class Carro:
  def acelerar(self):
    print("ramchu")

class Moto:
  def acelerar(self):
    print("randam")

veiculos = [Carro(), Moto()]

for veiculos in veiculos:
  veiculos.acelerar()

"""Crie uma superclasse Funcionario com um método calcular_salario(). Crie duas subclasses: FuncionarioCLT e FuncionarioPJ. Cada uma calcula o salário de forma diferente.

"""

from abc import ABC, abstractmethod


class Funcionario(ABC):
    @abstractmethod
    def calcular_salario(self):
        pass

class FuncionarioCLT(Funcionario):
    def __init__(self, salario_base, beneficios):
        self.salario_base = salario_base
        self.beneficios = beneficios

    def calcular_salario(self):
        return self.salario_base + self.beneficios

class FuncionarioPj(Funcionario):
    def __init__(self, horas_trabalhadas, valor_hora):
        self.horas_trabalhadas = horas_trabalhadas
        self.valor_hora = valor_hora

    def calcular_salario(self):
        return self.horas_trabalhadas * self.valor_hora


funcionarios = [
    FuncionarioCLT(salario_base=3000, beneficios=500),
    FuncionarioPj(horas_trabalhadas=160, valor_hora=20)
]

# Exibindo os salários
for funcionario in funcionarios:
    print(f"Salário: R$ {funcionario.calcular_salario():.2f}")

"""# Nova seção

Modele um sistema de envio de mensagens com as classes Email, SMS e Whatsapp. Todas devem ter o método enviar_mensagem()
"""

class Email:
  def enviar_mensagem(self):
    print('Mensagem enviada')

class SMS:
  def enviar_mensagem(self):
    print('Mensagem enviada')

class Whatsapp:
  def enviar_mensagem(self):
    print('Mensagem enviada')

Mensagens = [Email(), SMS(), Whatsapp()]

for Mensagens in Mensagens:
  Mensagens.enviar_mensagem()

"""Crie um sistema de animais com as classes Passaro e Peixe, ambas com o método movimentar()"""

class animais:
  def movimentar(self):
    print("movimento")

class Passaro:
  def movimentar(self):
    print("Ele voa")

class Peixe:
  def movimentar(self):
    print("Ele nada")

animal = [Passaro(), Peixe()]

for animais in animal:
  animais.movimentar()

"""Crie uma superclasse FormaGeometrica com um método calcular_area(). Crie subclasses Quadrado e Circulo."""

import math

class FormaGeometrica:
    def calcular_area(self):
        print("A área")

class Quadrado(FormaGeometrica):
    def __init__(self, lado):
        self.lado = lado

    def calcular_area(self):
        return self.lado ** 2

class Circulo(FormaGeometrica):
    def __init__(self, raio):
        self.raio = raio

    def calcular_area(self):
        return math.pi * (self.raio ** 2)


formas = [Quadrado(4), Circulo(3)]


for forma in formas:
    print(f"Área: {forma.calcular_area():.2f}")

"""Modele um sistema de transporte com as classes Onibus, Bicicleta e Carro, cada uma com o método custo_viagem(distancia)."""

class Onibus:
  def custo_viagem (self):
    print("O custo do Onibus: 4,00 ")

class Bicicleta:
  def custo_viagem (self):
    print("O custo da Bicicleta: 0,00 ")

class Carro:
  def custo_viagem (self):
    print("O custo do Carro: 6,50 ")


transporte = [Onibus(), Bicicleta(), Carro()]

for transporte in transporte:
  transporte.custo_viagem()

""" Crie uma classe Arquivo com um método abrir(). Crie subclasses ArquivoTexto, ArquivoImagem e ArquivoVideo."""

class Arquivo:
  def abrir(self):
    print("Arquivo aberto")

class ArquivoTexto:
  def abrir(self):
    print("O arquivo texto foi aberto")

class ArquivoVideo:
  def abrir(self):
    print("O arquivo video foi aberto")

Arquivos = [ArquivoTexto(), ArquivoVideo()]

for Arquivo in Arquivos:
  Arquivo.abrir()

"""Crie um sistema de streaming com as classes Filme e Musica, ambas com o método reproduzir()."""

class Filme:
  def reproduzir(self):
    print("Reproduzindo filme")

class Musica:
  def reproduzir(self):
    print("Reproduzindo musica")

streaming = [Filme() , Musica()]

for streaming in streaming:
  streaming.reproduzir()

"""Modele um sistema de notificações com as classes NotificacaoEmail, NotificacaoSMS e NotificacaoPush"""

class Notificacoes:
  def notificacao(self):
    print("Notificação enviada")

class NotificacaoSMS:
  def notificacao(self):
    print("Notificação SMS enviada")

class NotificacaoPush:
  def notificacao(self):
    print("Notificação Push enviada")

class NotificacaoEmail:
  def notificacao(self):
    print("Notificação Email enviada")

notifica = [ NotificacaoEmail(), NotificacaoPush(), NotificacaoSMS()]

for Notificacoes in notifica:
  Notificacoes.notificacao()

"""Crie uma superclasse Pagamento e as subclasses PagamentoCartao, PagamentoPix e PagamentoBoleto. Utilize uma lista para simular o processamento de diferentes pagamentos."""

class Pagamento:
  def pagamentos(self):
    print("Pagamento realizado")

class PagamentoCartao:
  def pagamentos(self):
    print("Pagamento no Cartão realizado")

class PagamentoPix:
  def pagamentos(self):
    print("Pagamento no Pix realizado")

class PagamentoBoleto:
  def pagamentos(self):
    print("Pagamento no Boleto realizado")


formas = [PagamentoCartao(), PagamentoBoleto(), PagamentoPix()]

for Pagamento in formas:
  Pagamento.pagamentos()